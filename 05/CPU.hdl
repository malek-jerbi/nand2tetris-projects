// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// check instruction opcode. if 0 we can feed "1" into the load of the A register
    Not(in=instruction[15], out=loadAregister1);
    
    And(a=instruction[15], b=instruction[3], out=loadAregister2);
    Or(a=loadAregister1, b=loadAregister2, out=loadAregister);

    Or(a=isCWriteA, b=loadAregister1, out=loadAregisterx);

    And(a=instruction[15], b=instruction[5], out=isCWriteA);
    Mux16(a=instruction, b=outOfALU, sel=isCWriteA, out=outToAregsiter); // c1 dependson if the recent instruction was a c instruction (using the ALU ouput..)
    ARegister(in=outToAregsiter, load=loadAregisterx, out=outOfAregister); //this output should handle the M

    Mux16(a=outOfAregister, b=inM, sel=instruction[12], out=outToALU);

    And(a=instruction[15], b=instruction[4], out=loadDregister); 
    DRegister(in=outOfALU, load=loadDregister, out=outOfDregister);
    
    ALU(x=outOfDregister, y=outToALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outOfALU, zr=zr, ng=ng);
    Or16(a=outOfALU, b=outOfALU, out=outM); //dummy to ouput

    And(a=instruction[15], b=instruction[3], out=writeM);
    Or16(a=outOfAregister, b=outOfAregister, out[0..14]=addressM);

    Not(in=ng, out=isNonNeg);
    Not(in=zr, out=isNonZero);
    And(a=isNonNeg, b=isNonZero, out=isPositive); 

    
    And(a=isPositive, b=instruction[0], out=JGT);
    And(a=zr, b=instruction[1], out=JEQ);
    And(a=ng, b=instruction[2], out=JLT);
        
    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JLE, b=JGT, out=jumpToA);                  
    And(a=instruction[15], b=jumpToA, out=loadPC);   
    Not(in=loadPC, out=PCinc);
    PC(in=outOfAregister, inc=true, load=loadPC, reset=reset, out[0..14]=pc);

}
